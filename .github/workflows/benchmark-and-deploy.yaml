run-name: Benchmark & Deploy
name: Benchmark & Deploy
on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch ref'
        required: true
        default: 'main'
        type: string
jobs:
  env:
    runs-on: ubuntu-latest
    steps:
    - name: Env
      run: echo "${{ inputs.branch }} ${{ github.head_ref }}"
  cppcheck:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch }}
        submodules: 'recursive'
    - name: Install CppCheck
      run: |
        sudo -H apt-get update -y
        sudo -H apt-get install cppcheck
    - name: Run Cppcheck
      run: cppcheck --std=c++20 -I./lib --xml --xml-version=2 --force --enable=all example lib/core 2> cppcheck_res.xml
    - name: Generate Report
      run: cppcheck-htmlreport --title=WebFrame --file=cppcheck_res.xml --report-dir=codeql_report
    - name: Upload Report
      uses: actions/upload-artifact@v1
      with:
        name: cppcheck
        path: codeql_report
  doxygen:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          submodules: 'recursive'
      - name: Configure
        shell: bash
        run: |
          sudo apt install doxygen
          doxygen Doxyfile
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: doxygen
          path: |
            reports/docs
  benchmarks:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        port: [8888]
        server: [ac++-O] #, ac++-O1, ac++-O2, ac++-O3, ac++-Ofast, ac++-Og, ac++-Os, c++-O, c++-O1, c++-O2, c++-O3, c++-Ofast, c++-Og, c++-Os] # , python, node]
    name: ${{ matrix.os }}-${{ matrix.server }}
    runs-on: ${{ matrix.os }}
    steps:
      - id: env
        name: Get optimization
        if: startsWith(matrix.server, 'c++') || startsWith(matrix.server, 'ac++')
        shell: bash
        run: |
          declare -x optimization="`echo ${{ matrix.server }} | cut -d'-' -f2`"
          [[ "$optimization" = "" ]] && optimization="default" || optimization="-$optimization"
          echo "optimization=$optimization" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
      - name: Checkout 🛎️
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          submodules: 'recursive'
      - name: Install dependencies on ubuntu
        if: startsWith(matrix.server, 'c++') || startsWith(matrix.server, 'ac++')
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y gcc-11 g++-11 cmake
          cmake --version
          gcc-11 --version
          g++-11 --version
      - name: Install WebFrame & Build servers 🔧
        shell: bash
        run: |
          CXX_COMPILER=g++-11 cmake -DOPTIMIZATION=${{ steps.env.outputs.optimization }} . && make
      - name: Run Atomic server 🔧
        if: startsWith(matrix.server, 'ac++')
        shell: bash
        run: |
          ./BenchmarkAtomic ${{ matrix.port }} &
      - name: Run Normal server 🔧
        if: startsWith(matrix.server, 'c++')
        shell: bash
        run: |
          ./BenchmarkNormal ${{ matrix.port }} &
      - name: Install Flask & Run 🔧
        if: startsWith(matrix.server, 'python')
        shell: bash
        run: |
          python -m pip install flask;
          python benchmark/contestants/server.py &
      - name: Install Express & Run 🔧
        if: startsWith(matrix.server, 'node')
        shell: bash
        run: |
          npm install express;
          node benchmark/contestants/server.js &
      - name: Run benchmark 🚀
        shell: bash
        run: |      
          cd benchmark;
          mkdir tmp;
          bash benchmarker.sh 8888 ${{ matrix.server }};
      - name: Upload Report 🚀
        uses: actions/upload-artifact@v1
        with:
          name: benchmark_${{ matrix.server }}-${{ steps.env.outputs.optimization }}
          path: benchmark/tmp/
  benchmark:
    needs: [benchmarks]
    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          submodules: 'recursive'
      - name: Download all artifacts 🔧
        uses: actions/download-artifact@v3
      - name: Prepare
        shell: bash
        run: |
          mkdir -p benchmark/report/;
          paste -d "," benchmark_*/test1.curl.csv > benchmark/report/test1.curl.csv;
          paste -d "," benchmark_*/test1.time.csv > benchmark/report/test1.time.csv;
          paste -d "," benchmark_*/test2.curl.csv > benchmark/report/test2.curl.csv;
          paste -d "," benchmark_*/test2.time.csv > benchmark/report/test2.time.csv;
          cd benchmark;
          chmod +x ./csv2html.sh;
          ./csv2html.sh report/test1.curl.csv "Test 1 / CURL total time" > report/test1.curl.html
          ./csv2html.sh report/test1.time.csv "Test 1 / CURL time %e" > report/test1.time.html
          ./csv2html.sh report/test2.curl.csv "Test 2 / CURL total time" > report/test2.curl.html
          ./csv2html.sh report/test2.time.csv "Test 2 / CURL time %e" > report/test2.time.html
          cat report/*.*.html > report/index.html 
      - name: Upload Report 🚀
        uses: actions/upload-artifact@v1
        with:
          name: benchmark_report
          path: benchmark/report/
  deploy:
    runs-on: ubuntu-latest
    needs: [cppcheck, doxygen, benchmark]
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          submodules: 'recursive'
      - name: Download all artifacts 🔧
        uses: actions/download-artifact@v3
      - name: Prepare
        shell: bash
        run: |
          rm -rf ./reports
          mkdir -p ./reports/benchmark ./reports/docs ./reports/codeql_report
          mv -f ./cppcheck/* reports/codeql_report/
          mv -f ./doxygen/* reports/docs/
          mv -f ./benchmark_report/* ./reports/benchmark/
      - name: Commit the reports
        shell: bash
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add reports/
          git commit -m "Pipeline reports"
      - name: Push pipeline reports
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ inputs.branch }}
  Deploy2GithubPages:
    needs: [deploy]
    uses: WebFrame/webframe.github.io/.github/workflows/website_update.yaml@test-pipelines
    with:
      core_branch: ${{ inputs.branch }}
