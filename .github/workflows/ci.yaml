name: Check builds
on:
  workflow_dispatch:

  pull_request:
  release:
    types: [published]
    
  push:
    branches:
      - main
      - develop
      - dev/*

env:
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  CLANG_TIDY_VERSION: "15.0.2"

jobs:
  builds:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04] #, ubuntu-20.04, macos-13, macos-12, macos-11, windows-2022, windows-2019]
        compiler:
          # you can specify the version after `-` like "llvm-15.0.2".
          #- llvm-15.0.2
          - gcc-11
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
        inja:
          - ON
          # - OFF

        #exclude:
        #  - os: windows-latest
        #    compiler: gcc-11
        #    generator: "Ninja Multi-Config"
        #    build_type: Release
        #    
        #  - os: windows-2022
        #    compiler: gcc-11
        #    generator: "Ninja Multi-Config"
        #    build_type: Release
        #    
        #  - os: windows-2019
        #    compiler: gcc-11
        #    generator: "Ninja Multi-Config"
        #    build_type: Release
#
        #  - os: ubuntu-22.04
        #    compiler: llvm-15.0.2
        #    generator: "Ninja Multi-Config"
        #    build_type: Release
#
        #include:
        #  # Add appropriate variables for gcov version required. This will intentionally break
        #  # if you try to use a compiler that does not have gcov set
        #  - compiler: gcc-11
        #    gcov_executable: gcov
#
        #  - compiler: llvm-15.0.2
        #    gcov_executable: "llvm-cov gcov"
#
        #  - os: ubuntu-20.04
        #    enable_clang_tidy: On
        #    enable_cppcheck: On
#
        #  # Set up preferred package generators, for given build configurations
        #  - build_type: Release
        #    package_maintainer_mode: OFF
#
        #  # This exists solely to make sure a non-multiconfig build works
        #  - os: windows-2022
        #    compiler: msvc
        #    generator: "Visual Studio 17 2022"
        #    build_type: Release
        #    package_maintainer_mode: On
        #    enable_clang_tidy: Off
        #    enable_cppcheck: Off
#
        #  - os: windows-2022
        #    compiler: msvc
        #    generator: "Visual Studio 17 2022"
        #    build_type: Release
        #    package_maintainer_mode: Off
        #    enable_clang_tidy: Off
        #    enable_cppcheck: Off
#
        #  - os: windows-2022
        #    compiler: msvc
        #    generator: "Visual Studio 17 2022"
        #    build_type: Release
        #    package_maintainer_mode: On
        #    enable_clang_tidy: Off
        #    enable_cppcheck: Off
#
        #  - os: windows-2019
        #    compiler: msvc
        #    generator: "Visual Studio 16 2019"
        #    build_type: Release
        #    package_maintainer_mode: On
        #    enable_clang_tidy: Off
        #    enable_cppcheck: Off
#
        #  - os: windows-2019
        #    compiler: msvc
        #    generator: "Visual Studio 16 2019"
        #    build_type: Release
        #    package_maintainer_mode: Off
        #    enable_clang_tidy: Off
        #    enable_cppcheck: Off
#
        #  - os: windows-2019
        #    compiler: msvc
        #    generator: "Visual Studio 16 2019"
        #    build_type: Release
        #    package_maintainer_mode: On
        #    enable_clang_tidy: Off
        #    enable_cppcheck: Off

    steps:
      - name: Check for llvm version mismatches
        if: ${{ contains(matrix.compiler, 'llvm') && !contains(matrix.compiler, env.CLANG_TIDY_VERSION) }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('There is a mismatch between configured llvm compiler and clang-tidy version chosen')

      #- uses: actions/checkout@v4
      #  with:
      #    submodules: 'recursive'
      #
      #- name: Cache
      #  uses: actions/cache@v3
      #  with:
      #    path: |
      #      ~/vcpkg
      #      ./build/vcpkg_installed
      #      ${{ env.HOME }}/.cache/vcpkg/archives
      #      ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
      #      ${{ env.LOCALAPPDATA }}\vcpkg\archives
      #      ${{ env.APPDATA }}\vcpkg\archives
      #    key: ${{ runner.os }}-${{ matrix.compiler }}-${{ env.BUILD_TYPE }}-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('./vcpkg.json')}}
      #    restore-keys: |
      #      ${{ runner.os }}-${{ env.BUILD_TYPE }}
#
      #- name: Setup Cache
      #  uses: ./.github/actions/setup_cache
      #  with:
      #    compiler: ${{ matrix.compiler }}
      #    build_type: ${{ matrix.build_type }}
      #    developer_mode: ${{ matrix.developer_mode }}
      #    generator: ${{ matrix.generator }}
#
      #- name: Setup Cpp
      #  uses: aminya/setup-cpp@v1
      #  with:
      #    compiler: ${{ matrix.compiler }}
      #    vcvarsall: ${{ contains(matrix.os, 'windows' )}}
      #    cmake: true
      #    ninja: true
      #    conan: true
      #    vcpkg: false
      #    ccache: true
      #    clangtidy: ${{ env.CLANG_TIDY_VERSION }}
      #    cppcheck: true
      #    gcovr: true
      #    opencppcoverage: true
#
      #- name: Configure CMake
      #  run: |
      #    cmake -S . -B ./build -G "${{matrix.generator}}" -DUSE_INJA=${{ matrix.inja }} -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}}
#
      #- name: Build
      #  # Execute the build.  You can specify a specific target with "--target <NAME>"
      #  run: |
      #    cmake --build ./build --config ${{matrix.build_type}}
#
      ## - name: Unix - Test and coverage
      ##   if: runner.os != 'Windows'
      ##   working-directory: ./build
      ##   # Execute tests defined by the CMake configuration.
      ##   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      ##   run: |
      ##     ctest -C ${{matrix.build_type}}
      ##     gcovr -j ${{env.nproc}} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}'
#
      ## - name: Windows - Test and coverage
      ##   if: runner.os == 'Windows'
      ##   working-directory: ./build
      ##   run: |
      ##     OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{matrix.build_type}}
#
      ## - name: CPack
      ##   if: matrix.package_generator != ''
      ##   working-directory: ./build
      ##   run: |
      ##     cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}}
#
      ## - name: Publish Snapshot Release
      ##   uses: softprops/action-gh-release@v1
      ##   if: ${{ (github.ref == 'refs/heads/main') && matrix.package_generator != '' }}
      ##   with:
      ##     tag_name: "snapshot-${{ github.sha }}"
      ##     files: |
      ##       build/*-*${{ matrix.build_type }}*-*.*
#
      ## - name: Publish Tagged Release
      ##   uses: softprops/action-gh-release@v1
      ##   if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.package_generator != '' }}
      ##   with:
      ##     files: |
      ##       build/*-*${{ matrix.build_type }}*-*.*
#
      ## - name: Publish to codecov
      ##   uses: codecov/codecov-action@v2
      ##   with:
      ##     flags: ${{ runner.os }}
      ##     name: ${{ runner.os }}-coverage
      ##     files: ./build/coverage.xml
#
      #- name: Setup tests
      #  shell: bash
      #  run: |
      #    mkdir -p ./tests/bin/log
      #    mkdir -p ./bin/log
      #- name: Root dir
      #  shell: bash
      #  run: |
      #    ls .
      #- name: Build dir
      #  shell: bash
      #  run: |
      #    ls build
      #- name: Test dir
      #  shell: bash
      #  run: |
      #    ls tests
      #- name: Run tests
      #  if: contains(matrix.generator, 'Unix Makefiles')
      #  shell: bash
      #  run: |
      #    ./build/tests/Core-Tests
      #- name: Run tests
      #  if: (!contains(matrix.os, 'windows')) && contains(matrix.generator, 'Ninja')
      #  shell: bash
      #  run: |
      #    ./build/tests/${{matrix.build_type}}/Core-Tests
      #- name: Run tests
      #  if: contains(matrix.os, 'windows')
      #  shell: bash
      #  run: |
      #    ./build/tests/${{matrix.build_type}}/Core-Tests.exe
      #- name: Extract branch name
      #  shell: bash
      #  run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      #  id: extract_branch
  benchmarks:
    needs: [builds]
    uses: ./.github/workflows/benchmark-and-deploy.yaml
    with:
      branch: ${{ github.ref_name }}
    secrets: inherit
