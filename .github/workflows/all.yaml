name: Build & Test & Compare & Deploy
on:
    workflow_dispatch:
    push:
    pull_request:
        types: [opened]
    pull_request_target:
        branches:
            - "*"

jobs:
    build:
        strategy:
            fail-fast: false
            matrix:
                os: [windows-latest, ubuntu-latest]
                optimization: [-O, -O1, -O2, -O3, -Ofast, -Og, -Os]
                include:
                    - cxx: g++
                        os: windows-latest
                    - cxx: g++-11
                        os: ubuntu-latest
        name: ${{ matrix.os }}${{ matrix.optimization }}
        runs-on: ${{ matrix.os }}
        steps:
            - uses: actions/checkout@v3
                with:
                    submodules: 'recursive'
            - name: Install dependencies on windows
                if: startsWith(matrix.os, 'windows')
                run: |
                    choco install mingw --version 11.2.0.07112021 --force
                    cmake --version
                    gcc --version
            - name: Install dependencies on ubuntu
                if: startsWith(matrix.os, 'ubuntu')
                run: |
                    sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
                    sudo apt-get update
                    sudo apt-get install -y gcc-11 g++-11 make
                    cmake --version
                    gcc-11 --version
                    g++-11 --version
                    mkdir -p ./bin
            - name: Configure & Build
                shell: bash
                run: |
                    CXX_COMPILE=${{ matrix.cxx }} cmake .        
         - name: Prepare speed test
                shell: bash
                run: |
                    mkdir -p ./benchmark/performance/${{ matrix.os }};
            - name: ${{ matrix.optimization }}
                shell: bash
                timeout-minutes: 100
                run: |
                    ./tests/Core-Tests
                    ./tests/Core-Tests | sed -E "s/`printf "\033"`\[([0-9]+)(;1)?m//g" | cat > ./bin/log/performance.txt
                    cp ./bin/log/performance.txt ./benchmark/performance/${{ matrix.os }}/performance${{ matrix.optimization }}.txt
            - name: Archive production artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: ${{ matrix.os }}${{ matrix.optimization }}
                    path: |
                        ./benchmark/performance/${{ matrix.os }}/performance${{ matrix.optimization }}.txt
    group-results:
        name: Summarize
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Download all workflow run artifacts
                uses: actions/download-artifact@v3
            - name: Display structure of downloaded files
                run: ls -R
            - name: Craft final document
                shell: bash
                run: |
                    for i in */* ; 
                    do 
                        echo $i | cut -d'/' -f1 ; 
                        paste <(cat $i | grep ') WebFrame - integration testing The web server    should respond to request with' | cut -d'^' -f2 | sed -e 's/^/2\^/') \
                                    <(cat $i | grep "Would have been nice" | cut -d'|' -f2) | 
                                sed 's/Would have been nice/expected\t/g' | 
                                sed 's/but got/\tbut got\t/g' |
                                sed 's/[ \t][ \t]*/ /g' |
                                sed -E "s/`printf "\033"`\[([0-9]+)(;1)?m//g"
                        echo "";
                    done > summary.txt;
                    cat summary.txt;
            - name: Archive production artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: Summary
                    path: |
                        summary.txt
    cppcheck:
        needs: build
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v3
            with:
                submodules: 'recursive'
        - name: Install CppCheck
            run: |
                sudo -H apt-get update -y
                sudo -H apt-get install cppcheck
        - name: Run Cppcheck
            run: cppcheck --std=c++20 -I./lib --xml --xml-version=2 --force --enable=all example lib/core 2> cppcheck_res.xml
        - name: Generate Report
            run: cppcheck-htmlreport --title=WebFrame --file=cppcheck_res.xml --report-dir=codeql_report
        - name: Upload Report
            uses: actions/upload-artifact@v1
            with:
                name: cppcheck
                path: codeql_report
    doxygen:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
                with:
                    submodules: 'recursive'
            - name: Configure
                shell: bash
                run: |
                    sudo apt install doxygen
                    doxygen Doxyfile
            - name: Archive production artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: doxygen
                    path: |
                        reports/docs
    benchmarks:
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                port: [8888]
                server: [ac++-O, ac++-O1, ac++-O2, ac++-O3, ac++-Ofast, ac++-Og, ac++-Os, c++-O, c++-O1, c++-O2, c++-O3, c++-Ofast, c++-Og, c++-Os, python, node]
        needs: build
        name: ${{ matrix.os }}-${{ matrix.server }}
        runs-on: ${{ matrix.os }}
        steps:
            - id: env
                uses: actions/github-script@v6.0.0
                with:
                    script: |
                        console.log(context)
                        const server = "${{ matrix.server }}"
                        const optimization = (server[0] != "a" && server[0] != "c") ? "default" : ( (server[0] == "a") ? server.substring(4) : server.substring(3) )
                        core.setOutput('optimization', optimization)
            - name: Checkout 🛎️
                uses: actions/checkout@v3
                with:
                    submodules: 'recursive'
            - name: Install dependencies on ubuntu
                if: startsWith(matrix.server, 'c++') || startsWith(matrix.server, 'ac++')
                run: |
                    sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
                    sudo apt-get update
                    sudo apt-get install -y gcc-11 g++-11 make
                    make --version
                    gcc-11 --version
                    g++-11 --version
            - name: Install WebFrame & Build servers 🔧
                shell: bash
                run: |
                    CXX_COMPILER=${{ matrix.cxx }} cmake ..
            - name: Run Atomic server 🔧
                if: startsWith(matrix.server, 'ac++')
                shell: bash
                run: |
                    ./BenchmarkAtomic
            - name: Run Normal server 🔧
                if: startsWith(matrix.server, 'c++')
                shell: bash
                run: |
                    ./BenchmarkNormal
            - name: Install Flask & Run 🔧
                if: startsWith(matrix.server, 'python')
                shell: bash
                run: |
                    python -m pip install flask;
                    python benchmark/contestants/server.py &
            - name: Install Express & Run 🔧
                if: startsWith(matrix.server, 'node')
                shell: bash
                run: |
                    npm install express;
                    node benchmark/contestants/server.js &
            - name: Run benchmark 🚀
                shell: bash
                run: |            
                    cd benchmark;
                    mkdir tmp;
                    bash benchmarker.sh 8888 ${{ matrix.server }};
            - name: Upload Report 🚀
                uses: actions/upload-artifact@v1
                with:
                    name: benchmark_${{ matrix.server }}-${{ steps.env.outputs.optimization }}
                    path: benchmark/tmp/
    benchmark:
        needs: [benchmarks]
        concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.
        runs-on: ubuntu-latest
        steps:
            - name: Checkout 🛎️
                uses: actions/checkout@v3
                with:
                    submodules: 'recursive'
            - name: Download all artifacts 🔧
                uses: actions/download-artifact@v3
            - name: Prepare
                shell: bash
                run: |
                    mkdir -p benchmark/report/;
                    paste -d "," benchmark_*/test1.curl.csv > benchmark/report/test1.curl.csv;
                    paste -d "," benchmark_*/test1.time.csv > benchmark/report/test1.time.csv;
                    paste -d "," benchmark_*/test2.curl.csv > benchmark/report/test2.curl.csv;
                    paste -d "," benchmark_*/test2.time.csv > benchmark/report/test2.time.csv;
                    cd benchmark;
                    chmod +x ./csv2html.sh;
                    ./csv2html.sh report/test1.curl.csv "Test 1 / CURL total time" > report/test1.curl.html
                    ./csv2html.sh report/test1.time.csv "Test 1 / CURL time %e" > report/test1.time.html
                    ./csv2html.sh report/test2.curl.csv "Test 2 / CURL total time" > report/test2.curl.html
                    ./csv2html.sh report/test2.time.csv "Test 2 / CURL time %e" > report/test2.time.html
                    cat report/*.*.html > report/index.html 
            - name: Upload Report 🚀
                uses: actions/upload-artifact@v1
                with:
                    name: benchmark_report
                    path: benchmark/report/
    deploy:
        runs-on: ubuntu-latest
        needs: [cppcheck, doxygen, benchmark]
        steps:
            - name: Checkout 🛎️
                uses: actions/checkout@v3
                with:
                    submodules: 'recursive'
            - name: Download all artifacts 🔧
                uses: actions/download-artifact@v3
            - name: Prepare
                shell: bash
                run: |
                    rm -rf ./reports
                    mkdir -p ./reports/benchmark ./reports/docs ./reports/codeql_report
                    mv -f ./cppcheck/* reports/codeql_report/
                    mv -f ./doxygen/* reports/docs/
                    mv -f ./benchmark_report/* ./reports/benchmark/
            - name: Commit the reports
                shell: bash
                run: |
                    git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
                    git config --local user.name "github-actions[bot]"
                    git add reports/
                    git commit -m "Pipeline reports"
            - name: Push pipeline reports
                uses: ad-m/github-push-action@master
                with:
                    github_token: ${{ secrets.GITHUB_TOKEN }}
                    branch: ${{ github.ref }}
            - name: Deploy to GitHub Pages 🚀
                continue-on-error: true
                if: ${{ always() && github.ref == 'refs/heads/master' }}
                uses: JamesIves/github-pages-deploy-action@v4.2.5
                with:
                    branch: gh-pages # The branch the action should deploy to.
                    folder: ./reports # The folder the action should deploy.
